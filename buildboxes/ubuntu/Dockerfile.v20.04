# syntax=docker/dockerfile:1
FROM --platform=$TARGETPLATFORM ubuntu:20.04
SHELL ["/bin/bash", "-euxo", "pipefail", "-c"]

################################################################################
# DO NOT EDIT THIS FILE!
#
# 1. Edit the *.gotmpl files instead.
# 2. Run 'go run generate-from-templates.go'.
################################################################################

# Informational
ARG TARGETPLATFORM
ARG BUILDPLATFORM
RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM."

# Identify ourselves
ENV OS_DIST ubuntu
ENV OS_DIST_VER 20.04
ENV OS_DIST_PKG deb

# Environment variables
ENV CGO_ENABLED 0
ENV DEBIAN_FRONTEND noninteractive
ENV PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin:/go/bin
ENV PIP_ROOT_USER_ACTION ignore

RUN apt-get -y update && \
    apt-get -y upgrade && \
    apt-get -y install --no-install-recommends \
        build-essential \
        dialog \
        git \
        gpg \
        nano \
        openssh-client \
        software-properties-common \
        wget \
    && \
    rm -rf /var/lib/apt/lists/* \
    ;

RUN add-apt-repository -y ppa:longsleep/golang-backports

RUN apt-get -y update && \
    apt-get -y install --no-install-recommends \
        autoconf \
        autotools-dev \
        bash \
        curl \
        debhelper \
        docker \
        file \
        gettext \
        glibc-source \
        glibc-tools \
        golang-go \
        gzip \
        jq \
        libncurses5-dev \
        libreadline-dev \
        locales \
        pkg-config \
        python3 \
        python3-dev \
        python3-pip \
        python3-virtualenv \
        util-linux \
    && \
    rm -rf /var/lib/apt/lists/* \
    ;

COPY download-asset.toml /etc/download-asset/download-asset.toml
RUN go install github.com/northwood-labs/download-asset@latest

RUN --mount=type=secret,id=GITHUB_TOKEN GITHUB_TOKEN="$(cat /run/secrets/GITHUB_TOKEN)" \
    download-asset get --owner-repo goreleaser/goreleaser-pro
