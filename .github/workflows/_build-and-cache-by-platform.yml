---
# This workflow uses actions that are not certified by GitHub. They are provided
# by a third-party and are governed by separate terms of service, privacy
# policy, and support documentation.

name: "ðŸŽ¯ Step: Build and cache"
on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
      package-version:
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-build-and-cache
  cancel-in-progress: true

# Variables available to all jobs defined in this file
env:
  DOCKER_BUILDKIT: 1
  REGISTRY: ${{ vars.REGISTRY }}

# Declare default permissions as read only.
permissions: read-all

jobs:
  compile_ubuntu:
    runs-on: ${{ matrix.arch.runner }}
    name: "ðŸ“¦ Ubuntu ${{ matrix.release.version }} (${{ matrix.arch.id }})"
    strategy:
      fail-fast: false
      matrix:
        release:
          - version: "20.04"
            name: focal
          - version: "22.04"
            name: jammy
        arch:
          - id: amd64
            runner: ubuntu-latest
          - id: arm64
            runner: ubicloud-standard-4-arm

    container:
      image: "ghcr.io/northwood-labs/package-builder/ubuntu-v${{ matrix.release.version }}:latest"
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --privileged

    steps:
      - name: Check to see if we've already built this part of the build matrix
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        id: check
        with:
          key: "${{ inputs.package-name }}-${{ inputs.package-version }}-ubuntu-${{ matrix.release.name }}-${{ matrix.arch.id }}"
          path: "packages/python3.12/dist"
          lookup-only: true

      - name: Git clone
        if: steps.check.outputs.cache-hit != 'true'
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          ref: ${{ github.base_ref }}

      - name: Compile the software from source
        if: steps.check.outputs.cache-hit != 'true'
        working-directory: packages/${{ inputs.package-name }}
        env:
          PKG_VER: "${{ inputs.package-version }}"
        run: |
          bash "./compile-${OS_DIST}-${OS_DIST_NAME}.sh"

      - name: Package the compiled software
        if: steps.check.outputs.cache-hit != 'true'
        working-directory: packages/${{ inputs.package-name }}
        env:
          GPG_KEY_B64: ${{ secrets.GPG_KEY_B64 }}
          NFPM_PASSPHRASE: "${{ secrets.GPG_PWD }}"
          PKG_VER: "${{ inputs.package-version }}"
        run: |
          echo -n "${GPG_KEY_B64}" | base64 --decode > 3C7658F0.asc
          mkdir -p ./dist
          nfpm package --config nfpm-${OS_DIST}-${OS_DIST_NAME}.yaml --packager deb --target ./dist
          ls -lahF ./dist

      - name: Cache the packages
        if: steps.check.outputs.cache-hit != 'true'
        uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        id: cache-packages
        with:
          key: "${{ inputs.package-name }}-${{ inputs.package-version }}-ubuntu-${{ matrix.release.name }}-${{ matrix.arch.id }}"
          path: packages/${{ inputs.package-name }}/dist

  add_marker:
    needs:
      - compile_ubuntu
    runs-on: ubuntu-latest
    name: "Add build marker if all builds succeed"

    steps:
      - name: Cache the packages
        uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        id: cache-packages
        with:
          key: "${{ inputs.package-name }}-${{ inputs.package-version }}"
          path: /etc/os-release
