---
# This workflow uses actions that are not certified by GitHub. They are provided
# by a third-party and are governed by separate terms of service, privacy
# policy, and support documentation.

name: "🛠️ Auto-update buildboxes"
on:
  push:
    branches: [main]
    paths:
      - "buildboxes/**"
  pull_request:
    branches: [main]
    paths:
      - "buildboxes/**"

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Variables available to all jobs defined in this file
env:
  DOCKER_BUILDKIT: 1
  REGISTRY: ${{ vars.REGISTRY }}

# Declare default permissions as read only.
permissions: read-all

jobs:
  generate:
    runs-on: ubuntu-latest
    name: "🛠️ Generate"
    permissions:
      packages: write
      contents: read
    strategy:
      fail-fast: false

    outputs:
      dockerfiles: ${{ steps.changed_files.outputs.dockerfiles }}

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Git clone
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.base_ref }}
          fetch-depth: 0

      - name: Get changed files
        id: changed_files
        run: |
          ./diff.sh ${{ github.event.before }} ${{ github.event.after }}
          echo "dockerfiles=$(jq -Mrc '.' .changed)" >> "$GITHUB_OUTPUT"
          echo "~~~json" >> $GITHUB_STEP_SUMMARY
          echo "$(jq -Mr '.' .changed)" >> $GITHUB_STEP_SUMMARY
          echo "~~~" >> $GITHUB_STEP_SUMMARY

  build:
    needs: generate
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.generate.outputs.dockerfiles) }}

    name: "📦 Build ${{ matrix.dockerfile }}"

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Git clone
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.base_ref }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          version: latest
          platforms: linux/amd64,linux/arm64

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build the Docker image (multiarch)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          export DIR="buildboxes/$(echo "${{ matrix.dockerfile }}" | cut -d '/' -f 1)"
          export DFILE="$(echo "${{ matrix.dockerfile }}" | cut -d '/' -f 2)"
          export IMAGE="$(echo "${{ matrix.dockerfile }}" | sed "s|/Dockerfile.|-|g")"

          cp -vf download-asset.toml "${DIR}/download-asset.toml"

          cd "${DIR}" && \
            docker buildx build \
              --no-cache \
              --platform "linux/amd64,linux/arm64" \
              --tag "ghcr.io/northwood-labs/package-builder/${IMAGE}:latest" \
              --file "${DFILE}" \
              --secret id=GITHUB_TOKEN,env=GITHUB_TOKEN \
              --output=type=registry \
              --compress \
              --force-rm \
              --build-arg BUILD_DATE=$(date "+%Y-%m-%d") \
              --build-arg "VCS_REF=$(git log --pretty=format:'%h' -n 1 | tr -d '\n')" \
              .
