---
# This workflow uses actions that are not certified by GitHub. They are provided
# by a third-party and are governed by separate terms of service, privacy
# policy, and support documentation.

name: "🎯 Step: Build and cache"
on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
      package-version:
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-build-and-cache
  cancel-in-progress: true

# Variables available to all jobs defined in this file
env:
  DOCKER_BUILDKIT: 1
  REGISTRY: ${{ vars.REGISTRY }}

# Declare default permissions as read only.
permissions: read-all

jobs:
  generate:
    runs-on: ubuntu-latest
    name: "📦 Build and cache"
    strategy:
      fail-fast: false

    container:
      image: ghcr.io/northwood-labs/package-builder/ubuntu-v22.04:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --privileged

    steps:
      - name: Git clone
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
        with:
          ref: ${{ github.base_ref }}

      - name: Restore any cached build artifacts (musl-aarch64)
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        id: restore-musl-aarch64
        with:
          key: "build-cache-${{ inputs.package-name }}-${{ inputs.package-version }}-musl-aarch64"
          path: "/usr/bin/${{ inputs.package-name }}_musl_arm64"

      - name: Restore any cached build artifacts (musl-x86_64)
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        id: restore-musl-x86_64
        with:
          key: "build-cache-${{ inputs.package-name }}-${{ inputs.package-version }}-musl-x86_64"
          path: "/usr/bin/${{ inputs.package-name }}_musl_amd64"

      - name: "📦 Build the package"
        working-directory: packages/${{ inputs.package-name }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GORELEASER_KEY: "${{ secrets.GORELEASER_KEY }}"
          GPG_KEY_B64: ${{ secrets.GPG_KEY_B64 }}
          RSA_KEY_B64: ${{ secrets.RSA_KEY_B64 }}
          NFPM_PASSPHRASE: "${{ secrets.GPG_PWD }}"
        run: |
          # We just need to set a git tag. None of the rest of this matters.
          git init
          git config user.email "you@example.com"
          git config user.name "Your Name"
          git add .
          git commit -m "Test"
          git remote add origin https://example.com
          git tag "${{ inputs.package-version }}"

          # Decode the contents into files.
          echo -n "${GPG_KEY_B64}" | base64 --decode > 3C7658F0.asc
          echo -n "${RSA_KEY_B64}" | base64 --decode > signing.pem

          # Build the package
          goreleaser release --clean --nightly --skip=announce,publish,validate --verbose

      - name: Cache the packages
        uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        id: cache-packages
        with:
          key: "${{ inputs.package-name }}-${{ inputs.package-version }}"
          path: packages/${{ inputs.package-name }}/dist
