---
# This workflow uses actions that are not certified by GitHub. They are provided
# by a third-party and are governed by separate terms of service, privacy
# policy, and support documentation.

name: "ðŸŽ¯ Step: Generate DEB metadata"
on:
  workflow_dispatch:
  workflow_call:
    # We will pass secrets to the reusable workflow.

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-deb
  cancel-in-progress: true

# Variables available to all jobs defined in this file
env:
  DOCKER_BUILDKIT: 1
  REGISTRY: ${{ vars.REGISTRY }}

# Declare default permissions as read only.
permissions: read-all

jobs:
  generate:
    runs-on: ubuntu-latest
    name: s3fs
    strategy:
      fail-fast: false

    container:
      image: ghcr.io/northwood-labs/package-builder/ubuntu-v22.04:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --privileged

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Git clone
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.base_ref }}

      - name: Import GPG Signing Key
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_KEY_B64 }}
          passphrase: ${{ secrets.GPG_PWD }}

      - name: Mount s3fs and generate metadata
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GPG_PWD: ${{ secrets.GPG_PWD }}
          PACKAGE_BUCKET: ${{ vars.PACKAGE_BUCKET }}
        run: |
          echo "$AWS_ACCESS_KEY_ID:$AWS_SECRET_ACCESS_KEY" > ${HOME}/.passwd-s3fs
          chmod 600 ${HOME}/.passwd-s3fs

          mkdir -p /s3
          s3fs ${PACKAGE_BUCKET} /s3 \
              -o passwd_file=${HOME}/.passwd-s3fs \
              -o use_cache=/tmp \
              -o endpoint=us-east-2 \
              ;

          ARCH=("amd64" "arm64")
          REPOS=("main" "focal" "jammy")
          OS_VERS=("focal" "jammy")

          for REPO in ${REPOS[@]}; do
            for REL in ${OS_VERS[@]}; do
              for CPU in ${ARCH[@]}; do
                cd "/s3/apt" && \
                  mkdir -p "dists/${REL}/${REPO}/binary-${CPU}" && \
                  dpkg-scanpackages --arch "${CPU}" pool/ > "dists/${REL}/${REPO}/binary-${CPU}/Packages" && \
                  cat "dists/${REL}/${REPO}/binary-${CPU}/Packages" | gzip -9 > "dists/${REL}/${REPO}/binary-${CPU}/Packages.gz"
              done

              # Generate Release
              bash "${GITHUB_WORKSPACE}/generate-apt.sh" /s3/apt "${REL}" > /s3/apt/dists/${REL}/Release

              # Generate Release.gpg
              cd "/s3/apt" && \
                gpg --pinentry-mode loopback \
                  --passphrase "${GPG_PWD}" \
                  --sign \
                  --armor \
                  --yes \
                  --verbose \
                  --local-user "${GPG_FINGERPRINT}" \
                  --output "dists/${REL}/Release.gpg" \
                  --detach-sign "dists/${REL}/Release" \
                  ;

              # Generate InRelease
              cd "/s3/apt" && \
                gpg --pinentry-mode loopback \
                  --passphrase "${GPG_PWD}" \
                  --clearsign \
                  --armor \
                  --yes \
                  --verbose \
                  --local-user "${GPG_FINGERPRINT}" \
                  --output "dists/${REL}/InRelease" \
                  --detach-sign "dists/${REL}/Release" \
                  ;
            done
          done
